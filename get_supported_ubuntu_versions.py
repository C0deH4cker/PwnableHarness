#!/usr/bin/env python3
import os
import tempfile
import atexit
import shutil
from datetime import datetime, timedelta, timezone
from launchpadlib.launchpad import Launchpad

# launchpadlib loves to write a cache directory to the user's HOME directory.
# Tell to write in /tmp instead.
cachedir = tempfile.mkdtemp()
atexit.register(shutil.rmtree, cachedir)
os.environ["HOME"] = cachedir

pairs = []
exc = None
try:
	lp = Launchpad.login_anonymously(
		consumer_name="series-support-check",
		service_root="production",
		launchpadlib_dir=cachedir,
		timeout=5,
		version="devel")
	series = lp.distributions["ubuntu"].series
	for s in series:
		# We want more than just the supported versions
		dr: datetime = s.datereleased
		how_old = datetime.now(timezone.utc) - dr
		if s.supported or how_old.days < 365 * 4:
			pairs.append((s.version, s.name))
except Exception as e:
	exc = e
	pairs = [
		('24.04', 'noble'),
		('22.04', 'jammy'),
		('20.04', 'focal'),
		('18.04', 'bionic'),
		('16.04', 'xenial'),
		('14.04', 'trusty')
	]

pairs.sort()


print(f'# Autogenerated by {os.path.basename(__file__)}')
if exc is not None:
	print(f'# Exception: {exc}')

print("UBUNTU_VERSIONS := \\")
for p in pairs:
	print(f"\t{p[0]} \\")
print("\n")

print("UBUNTU_ALIASES := \\")
for p in pairs:
	print(f"\t{p[1]} \\")
print("\n")

for p in pairs:
	print(f"UBUNTU_VERSION_TO_ALIAS[{p[0]}] := {p[1]}")
print("\n")

for p in pairs:
	print(f"UBUNTU_ALIAS_TO_VERSION[{p[1]}] := {p[0]}")

for p in pairs:
	major, minor = map(int, p[0].split("."))
	supports32bit = True
	if major > 19 or major == 19 and minor == 10:
		supports32bit = False
	
	for x in p:
		print("UBUNTU_32BIT_SUPPORT[%s] :=%s" % (x, " 1" if supports32bit else ""))
