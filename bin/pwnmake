#!/bin/bash
set -euo pipefail

# Keep aligned with /VERSION
version=${PWNMAKE_VERSION:-2.1}

# This is the lowest version of pwnmake image that is supported by this pwnmake script
PWNABLEHARNESS_VERSION_MIN=2.1

docker_image_repo=c0deh4cker/pwnableharness
docker_image_tag_prefix=pwnmake-
docker_image_prefix=$docker_image_repo:$docker_image_tag_prefix

# There's no arm64 version available, so only try pulling the amd64 version
export DOCKER_DEFAULT_PLATFORM=linux/amd64


# https://stackoverflow.com/a/4025065
_vercmp() {
	if [[ $1 == $2 ]]
	then
		return 0
	fi
	local IFS=.
	local i ver1=($1) ver2=($2)
	# fill empty fields in ver1 with zeros
	for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
	do
		ver1[i]=0
	done
	for ((i=0; i<${#ver1[@]}; i++))
	do
		if ((10#${ver1[i]:=0} > 10#${ver2[i]:=0}))
		then
			return 1
		fi
		if ((10#${ver1[i]} < 10#${ver2[i]}))
		then
			return 2
		fi
	done
	return 0
}

vercmp() {
	_vercmp "$1" "$3"
	case $? in
	0)
		case "$2" in
			"=="|"<="|">="|"-eq"|"-le"|"-ge") return 0;;
		esac
		;;
	1)
		case "$2" in
			">"|">="|"-gt"|"-ge") return 0;;
		esac
		;;
	2)
		case "$2" in
			"<"|"<="|"-lt"|"-le") return 0;;
		esac
		;;
	esac
	
	return 1
}

# https://stackoverflow.com/a/18443300
realpath() (
	local OURPWD="$PWD"
	cd "$(dirname "$1")"
	local LINK="$(readlink "$(basename "$1")")"
	while [ "$LINK" ]; do
		cd "$(dirname "$LINK")"
		LINK="$(readlink "$(basename "$1")")"
	done
	local REALPATH="$PWD/$(basename "$1")"
	cd "$OURPWD"
	echo "$REALPATH"
)

# https://stackoverflow.com/a/44310938
search_file_up() (
	local start="$(realpath "$PWD")"
	local target="$1"
	local old=""
	
	until [ -f "$target" ] || [ "$PWD" = "$old" ]; do
		old="$PWD"
		cd ..
	done
	
	if [ ! -f "$target" ]; then
		return 1
	fi
	
	echo "$(realpath "$PWD")"
)

docker_image_exists() {
	docker image inspect "$1" >/dev/null 2>&1
}

docker_get_remote_digest() (
	local image="${1%:*}"
	local tag="${1#$image:}"
	
	# Use curl and sed to avoid unnecessary dependencies. Hooray for parsing JSON
	# with sed instead of jq to improve user installation experience! /s
	local token=$(curl --silent "https://auth.docker.io/token?scope=repository:$image:pull&service=registry.docker.io" \
		| sed 's/^.*"token":"\([^"]*\)".*$/\1/'
	)
	if [ -z "$token" ]; then
		echo "Error while trying to authenticate with the Docker.io API" >&2
		exit 1
	fi
	
	curl -sSL -D - -o /dev/null \
			-H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
			-H "Authorization: Bearer ${token}" \
			"https://registry-1.docker.io/v2/$image/manifests/$tag" \
		| grep -ie '^docker-content-digest:' | cut -d ' ' -f 2- | tr -d '\r'
)

docker_get_local_digest() {
	docker image inspect --format '{{index .RepoDigests 0}}' "$1" 2>/dev/null | cut -d '@' -f 2
}


show_help() {
	cat <<EOF
Usage: pwnmake [-C/--dir <path>] [--env <NAME=VALUE> ...] [--pwnableharness-version <version>] [--init]
               [--tag <tag>] [--digest <digest>] [--skip-update] [--reinit] [--shell] [--help] [--version]
               [--] [targets...]
Options:
  -C, --dir <path>   Path to the directory to use as a PwnableHarness workspace (default is to search
                     upwards looking for a directory containing a '.pwnmake' file, or '.').
  --env <NAME=VALUE> Set an environment variable within the pwnmake image for this command.
  --pwnableharness-version <version>
                     Select a specific PwnableHarness version for the pwnmake image base. For example,
                     '--pwnableharness-version 2.1' will use '${docker_image_tag_prefix}-v2.1' as the
                     pwnmake image base.
  --init             Creates a '.pwnmake' marker file in the workspace directory (default '.'), pinning
                     the current "latest" version of pwnmake.
  --tag <tag>        PwnableHarness pwnmake image tag to use (default 'latest'). The tag will be
                     prefixed with '${docker_image_tag_prefix}'. For example, '--tag v2.1' will use
                     '${docker_image_tag_prefix}v2.1' as the pwnmake image base.
  --digest <digest>  PwnableHarness pwnmake image digest to use. For example, '--digest sha256:abc...123'
                     will use '${docker_image_repo}@sha256:abc...123' as the pwnmake image base.
  --skip-update      Don't attempt to ensure the pwnmake image is up-to-date.
  --reinit           Force the pwnmake container to be reinitialized
  --pull             Always attempt to pull the pwnmake image from Docker Hub. This is typically only
                     useful for versions that are still in development, where tags other than "latest"
                     may be changing.
  --shell            Enter an interactive shell in the pwnmake container (for debugging)
  --verbose          Show executed commands verbosely (for debugging)
  --help             Display this help message.
  --version          Display the version of the pwnmake script.
  --                 Stop parsing options and pass all further arguments to 'make'.
  targets...         Arguments to be passed to 'make'. These can be targets to build or options like '-j8'.
Example: pwnmake -j4 docker-start publish VERBOSE=1
EOF
}


# pwnmake [...]
main() {
	local digest= init= pull= reinit= shell= skip_update= tag= verbose= want_version= workspace=
	local ph_version="${PWNMAKE_PWNABLEHARNESS_VERSION:-latest}"
	local env_args=()
	
	test -n "${PWNMAKE_TAG:-}" && tag="$PWNMAKE_TAG"
	test -n "${PWNMAKE_DIGEST:-}" && digest="$PWNMAKE_DIGEST"
	
	while [ "$#" -gt 0 ]; do
		case "$1" in
			--help)
				show_help >&2
				exit 1
				;;
			
			--init)
				shift
				init=1
				;;
			
			--reinit)
				shift
				reinit=1
				;;
			
			--pull)
				shift
				pull=1
				;;
			
			--shell)
				shift
				shell=1
				;;
			
			--verbose)
				shift
				verbose=1
				;;
			
			-C|--dir)
				shift
				workspace="$1"
				shift
				;;
			
			--env)
				shift
				env_args+=(--env "$2")
				shift
				;;
			
			--pwnableharness-version)
				shift
				ph_version="$1"
				shift
				;;
			
			--tag)
				shift
				tag="$1"
				shift
				;;
			
			--digest)
				shift
				digest="$1"
				shift
				;;
			
			--skip-update)
				shift
				skip_update=1
				;;
			
			--version)
				shift
				want_version=1
				;;
			
			--)
				shift
				break
				;;
			
			*)
				break
				;;
		esac
	done
	
	if [ -n "$verbose" ]; then
		set -x
	fi
	
	# No workspace dir specified on cmdline, search for it
	local PROJECT=.
	if [ -z "$workspace" ]; then
		local start="$(realpath "$PWD")"
		if workspace="$(search_file_up .pwnmake)"; then
			if [ "$start" != "$workspace" ]; then
				PROJECT="${start#$workspace/}"
			fi
		else
			workspace=.
		fi
	fi
	
	local HOST_WORKSPACE="$(realpath "$workspace")"
	
	# Handle --init (and --reinit should do this too)
	if [ -n "$init" ] || [ -n "$reinit" ]; then
		ph_version="$(docker run --rm --entrypoint=/bin/cat "${docker_image_prefix}latest" /PwnableHarness/VERSION)"
		echo "$ph_version" > "$workspace/.pwnmake"
		echo "Initialized $HOST_WORKSPACE/.pwnmake ($ph_version)"
		
		# Only --init should exit here, --reinit keeps going
		if [ -n "$init" ]; then
			exit 0
		fi
	fi
	
	# Is there a non-empty .pwnmake file that contains the version?
	if [ -z "$reinit" ] && [ -z "$ph_version" ] && [ -s "$workspace/.pwnmake" ]; then
		ph_version="$(cat "$workspace/.pwnmake")"
	fi
	
	# Check that --pwnableharness-version is a supported version
	if [ -n "$ph_version" ] && [ "$ph_version" != "latest" ]; then
		if vercmp "$ph_version" -lt "$PWNABLEHARNESS_VERSION_MIN"; then
			echo "PwnableHarness version $ph_version is unsupported; must be >=$PWNABLEHARNESS_VERSION_MIN" >&2
			exit 1
		fi
	fi
	
	# Check that --tag references a supported tag
	if [ -n "$tag" ] && [ "$tag" != "latest" ]; then
		if vercmp "${tag#v}" -lt "$PWNABLEHARNESS_VERSION_MIN"; then
			echo "pwnmake image with tag $tag is unsupported; must be >=$PWNABLEHARNESS_VERSION_MIN" >&2
			exit 1
		fi
	fi
	
	# Build tag if neither a tag/digest were supplied
	if [ -z "$tag" ] && [ -z "$digest" ]; then
		tag="$ph_version"
		if [ "$ph_version" != "latest" ]; then
			tag="v$ph_version"
		fi
	fi
	
	local docker_image
	if [ -n "$digest" ]; then
		# With a digest, the tag is unnecessary. It can be useful as documentation, though,
		# as it shows up in 'docker ps'. If a tag was provided, include it.
		docker_image="${docker_image_prefix}${tag}@${digest}"
	else
		docker_image="${docker_image_prefix}${tag}"
	fi
	
	# Handle --version
	if [ -n "$want_version" ]; then
		echo "pwnmake script version $version"
		ph_version="$(docker run --rm --entrypoint=/bin/cat "${docker_image}" /PwnableHarness/VERSION)"
		echo "PwnableHarness version $ph_version"
		exit 0
	fi
	
	# Get version of the Docker server on the host to know which version of the
	# Docker CLI to install in the builder container.
	local DOCKER_VERSION="$(docker version --format '{{.Server.Version}}' | cut -d- -f1)"
	if [ "$?" != 0 ]; then
		echo "Docker must be installed!" >&2
		exit 1
	fi
	
	# Create volume to cache the downloaded Docker CLI
	docker volume create pwnmake-docker-cli >/dev/null 2>&1 || true
	
	# Attempt to determine if a docker pull is necessary
	local need_pull=
	if [ -z "$digest" ] && [ "$tag" = "latest" ]; then
		# For the "latest" tag, check if the local digest (if present) matches the remote one
		if ! local_digest="$(docker_get_local_digest "$docker_image")"; then
			echo "Pulling pwnmake image for the first time..." >&2
			need_pull=1
		elif [ "$skip_update" != "1" ]; then
			local remote_digest="$(docker_get_remote_digest "$docker_image")"
			if [ -z "$remote_digest" ]; then
				echo "Unable to read remote image digest, skipping update" >&2
			elif [ "$local_digest" != "$remote_digest" ]; then
				echo "Pulling newer version of the pwnmake image..." >&2
				need_pull=1
			fi
		fi
	else
		# For tags other than "latest", just ensure that the tag is present locally. It's assumed
		# that only the "latest" tag is movable.
		if ! docker_image_exists "$docker_image"; then
			echo "Pulling pwnmake image ${docker_image}..." >&2
			need_pull=1
		fi
	fi
	
	# Unconditionally running docker pull would work, but then there would be either
	# unexplained long delays when trying to run pwnmake (because an image is being
	# pulled) or unnecessarily verbose output from docker pull even when the image
	# is up to date. By doing the above checks, we can make the user experience better.
	if [ -n "$need_pull" ] || [ -n "$pull" ]; then
		docker pull "$docker_image" >&2
	fi
	
	# A hash is built from:
	# * Current version of the pwnmake script
	# * The pwnableharness pwnmake image ID (pre-initialization)
	# * The hashes of all prebuild scripts
	# This is done so that if the pwnmake script, base image, or any prebuild scripts
	# change, the pwnmake image will be reinitialized.
	local image_id=$(docker image inspect --format '{{.Id}}' "$docker_image")
	local prebuild_hash=$(find "$workspace" -name prebuild.sh -print0 | sort -z | xargs -0 -n1 -r shasum -a 256 | shasum -a 256 | awk '{print $1}')
	local pwnmake_tag=$(echo "$version;$image_id;$prebuild_hash" | shasum -a 256 | head -c 12)
	
	# This is intentionally not "c0deh4cker/pwnableharness", which is the real
	# remote image repo on Docker Hub. Here, "c0deh4cker/pwnmake" is only used
	# for locally-generated builder images based on a pwnmake image from the
	# real remote.
	local pwnmake_repo=c0deh4cker/pwnmake
	local pwnmake_image=$pwnmake_repo:$pwnmake_tag
	local pwnmake_container=pwnmake-$pwnmake_tag
	
	# To force reinitialization, delete the pwnmake image
	if [ "$reinit" = "1" ]; then
		# Remove any old pwnmake images. Note that this may remove pwnmake
		# images used by other project directories that `pwnmake` has been run
		# from. This is acceptable, as they will be recreated on-demand. I'd
		# rather not force users to clean up their old pwnmake images. Rather,
		# they shouldn't even need to really know about or worry about the
		# pwnmake images.
		docker image rm $(docker image ls -q "$pwnmake_repo") >/dev/null 2>&1 || true
	fi
	
	local env_arg_sock_chmod=
	local host_os=$(uname -s)
	local DOCKER_GID host_docker_sock
	if [ "$host_os" = "Darwin" ]; then
		# https://github.com/docker/for-mac/issues/4755
		# Because of the above issue, /var/run/docker.sock on Docker for Mac is
		# owned by root:root with permissions rwx-r-xr-x. This means that only
		# root can talk over the socket. A workaround is to instead use the magic
		# file /var/run/docker.sock.raw. This file doesn't exist on macOS, but it
		# does exist in the Linux VM that Docker for Mac uses internally. This
		# socket is owned by root:root with permissions rw-rw-r--. Therefore, by
		# adding the user in the container to the root group (GID 0), it will be
		# able to talk over the Docker socket. Note that it is very confusing,
		# because simply looking at /var/run/docker.sock on your mac will show it
		# as being owned by $USER:staff (501:20 for me) with perms rwx-r-xr-x.
		# When you try to bind-mount /var/run/docker.sock into a container, it
		# actually uses the /var/run/docker.sock from the internal Linux VM in
		# Docker for Mac.
		DOCKER_GID=0
		host_docker_sock=/var/run/docker.sock.raw
	else
		# Find the GID of the docker group so it can be added as a supplementary group
		# for the container user (so it can run docker commands that affect the host).
		DOCKER_GID=$(grep -e '^docker:' /etc/group | cut -d ':' -f 3)
		host_docker_sock=/var/run/docker.sock
	fi
	
	if ! docker_image_exists "$pwnmake_image"; then
		# Remove any old pwnmake containers and images
		docker container rm $(docker container ls -a --format '{{.ID}} {{.Names}}' | grep 'pwnmake-' | awk '{ print $1 }') >/dev/null 2>&1 || true
		docker image rm $(docker image ls -q "$pwnmake_repo") >/dev/null 2>&1 || true
		
		# Get the current user's UID and GID so that any files created by the builder
		# container will have proper ownership.
		local CALLER_UID=$(id -u)
		local CALLER_GID=$(id -g)
		
		# Run the builder initialization and prep scripts then save as a new image
		if docker run \
			--name "$pwnmake_container" \
			--env DOCKER_VERSION="$DOCKER_VERSION" \
			--env HOST_WORKSPACE="$HOST_WORKSPACE" \
			--env PWNMAKE_VERSION="$version" \
			--env PWNMAKE_INIT=1 \
			--env PROJECT="$PROJECT" \
			--env CALLER_UID="$CALLER_UID" \
			--env CALLER_GID="$CALLER_GID" \
			--env DOCKER_GID="$DOCKER_GID" \
			-v "$HOST_WORKSPACE":/PwnableHarness/workspace \
			-v "$host_docker_sock":/var/run/docker.sock \
			-v pwnmake-docker-cli:/docker-cli \
			-it "$docker_image"
		then
			docker commit "$pwnmake_container" "$pwnmake_image" >/dev/null
			docker rm "$pwnmake_container" >/dev/null
		else
			ret=$?
			docker rm "$pwnmake_container" >/dev/null
			exit $ret
		fi
	fi
	
	local cmd_args
	if [ "$shell" = "1" ]; then
		if [ "$#" -gt 0 ]; then
			cmd_args=(/bin/bash -c "$*")
		else
			cmd_args=(/bin/bash)
			echo "Entering shell in builder container. To attempt the build normally, run:" >&2
			echo "" >&2
			echo "    pwnmake [args for make...]" >&2
			echo "" >&2
		fi
	else
		cmd_args=(/usr/bin/pwnmake "$@")
	fi
	
	# The container is created and then thrown away with each command
	docker run \
		--rm \
		--init \
		--env DOCKER_VERSION="$DOCKER_VERSION" \
		--env HOST_WORKSPACE="$HOST_WORKSPACE" \
		--env PWNMAKE_VERSION="$version" \
		--env PWNMAKE_INIT=0 \
		--env PROJECT="$PROJECT" \
		${env_args[@]+"${env_args[@]}"} \
		-v "$HOST_WORKSPACE":/PwnableHarness/workspace \
		-v "$host_docker_sock":/var/run/docker.sock \
		-v pwnmake-docker-cli:/docker-cli \
		-it "$pwnmake_image" \
		${cmd_args[@]+"${cmd_args[@]}"}
		# cmd_args trick from https://stackoverflow.com/a/7577209
}

main "$@"
